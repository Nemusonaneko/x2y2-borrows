// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LoanStarted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LoanStarted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LoanStarted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LoanStarted", id.toString(), this);
    }
  }

  static load(id: string): LoanStarted | null {
    return changetype<LoanStarted | null>(store.get("LoanStarted", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get loanId(): BigInt | null {
    let value = this.get("loanId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanId(value: BigInt | null) {
    if (!value) {
      this.unset("loanId");
    } else {
      this.set("loanId", Value.fromBigInt(<BigInt>value));
    }
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get collateralId(): BigInt | null {
    let value = this.get("collateralId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collateralId(value: BigInt | null) {
    if (!value) {
      this.unset("collateralId");
    } else {
      this.set("collateralId", Value.fromBigInt(<BigInt>value));
    }
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(<Bytes>value));
    }
  }

  get lender(): Bytes | null {
    let value = this.get("lender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lender(value: Bytes | null) {
    if (!value) {
      this.unset("lender");
    } else {
      this.set("lender", Value.fromBytes(<Bytes>value));
    }
  }

  get borrower(): Bytes | null {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes | null) {
    if (!value) {
      this.unset("borrower");
    } else {
      this.set("borrower", Value.fromBytes(<Bytes>value));
    }
  }

  get borrowAmount(): BigInt | null {
    let value = this.get("borrowAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set borrowAmount(value: BigInt | null) {
    if (!value) {
      this.unset("borrowAmount");
    } else {
      this.set("borrowAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get repayAmount(): BigInt | null {
    let value = this.get("repayAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set repayAmount(value: BigInt | null) {
    if (!value) {
      this.unset("repayAmount");
    } else {
      this.set("repayAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get loanDuration(): BigInt | null {
    let value = this.get("loanDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanDuration(value: BigInt | null) {
    if (!value) {
      this.unset("loanDuration");
    } else {
      this.set("loanDuration", Value.fromBigInt(<BigInt>value));
    }
  }

  get adminShare(): i32 {
    let value = this.get("adminShare");
    return value!.toI32();
  }

  set adminShare(value: i32) {
    this.set("adminShare", Value.fromI32(value));
  }

  get loanStart(): BigInt | null {
    let value = this.get("loanStart");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set loanStart(value: BigInt | null) {
    if (!value) {
      this.unset("loanStart");
    } else {
      this.set("loanStart", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get loans(): Array<string> {
    let value = this.get("loans");
    return value!.toStringArray();
  }

  set loans(value: Array<string>) {
    this.set("loans", Value.fromStringArray(value));
  }
}
